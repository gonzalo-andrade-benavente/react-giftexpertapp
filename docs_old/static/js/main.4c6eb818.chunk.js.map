{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertaApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"2MA4CeA,EAvCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAmBzC,OACI,mCACI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAsBO,OACzCN,EAAc,MAQd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCTlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAG,UAAEA,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCeLO,EAdM,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOF,EAAU,EAAVA,IAG/B,OAEI,sBAAKM,UAAU,yCAAf,UACI,qBAAKC,IAAKP,EAAKQ,IAAKN,IACpB,4BAAIA,QCoBDO,EAxBE,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFP,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACpBf,KAAMkB,EACNL,SAAS,SAIlB,CAAEpB,IAEEqB,EDb4BK,CAAc1B,GAApCa,EAFkB,EAEvBN,KAAca,EAFS,EAETA,QAEtB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,mBAAGJ,UAAU,qCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEiBhCgB,EA9BM,WAAM,MAGczC,mBAAS,CAAC,WAHxB,mBAGf0C,EAHe,KAGH3C,EAHG,KAKvB,OACI,qCAEI,iDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAET,EAAW6B,GAAb,OACZ,cAAC,EAAD,CAEA7B,SAAWA,GADJA,YChB/B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4c6eb818.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useState } from \"react\";\n\n\nconst AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [ inputValue , ...cats] );\n            setInputValue('');\n        }\n    }\n\n   \n\n    return (\n        <>\n            <form onSubmit={ handleSubmit }>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n\n                />\n            </form>\n        </>\n\n    )\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=ZG4jv5xayrFGw6j8nkoKz18CGyPKacWa`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            img: img.images?.downsized_medium.url\n        }\n    }\n    );\n    //setImages(gifs);\n    return gifs;\n}\n\n//export default getGifs;","\n\nconst GiftGridItem = ({ id, title, img }) => {\n    //const GiftGridItem = ( props ) => {\n\n    return (\n\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={img} alt={title} />\n            <p>{title}</p>\n        </div>\n\n    )\n\n}\n\nexport default GiftGridItem;","import React from 'react';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GiftGridItem from './GifGridItem';\n\nconst GiftGrid = ({ category }) => {\n\n    const { data:images , loading } =  useFetchGifs( category );\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && <p className=\" animate__animated animate__flash \">Loading..</p> }\n   \n            <div className=\"card-grid\">\n                {\n                    images.map((img) =>\n                        <GiftGridItem key={img.id} {...img} />\n                    )\n                }\n            </div>\n\n\n        </>\n    )\n\n}\n\nexport default GiftGrid;","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => setState({\n                data: imgs,\n                loading: false\n            })\n        );\n\n    }, [ category ]);\n\n    return state;\n\n}","import React, { useState } from 'react';\n\nimport AddCategory from './components/AddCategory';\nimport GiftGrid from './components/GiftGrid';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [ categories, setCategories] = useState(['Naruto']);\n\n    return (\n        <>\n\n            <h2> GiftExpertApp </h2>\n            \n            <AddCategory setCategories={ setCategories }/>\n            \n            <hr />\n\n            <ol>\n                { \n                    categories.map( ( category , i ) => \n                        <GiftGrid \n                        key= { category }\n                        category={ category }/>\n                    )\n                }\n            </ol>\n\n        </>\n\n    )\n\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertaApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}